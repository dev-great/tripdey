from rest_framework.views import APIView
from rest_framework import status
from .exceptions import CustomAPIException
from .utils import custom_response
from .utils import CustomPagination 

class ExampleView(APIView):

    def get(self, request):
        try:
            # Your logic here
            data = {"key": "value"}
            return custom_response(status_code=status.HTTP_200_OK, message="Success", data=data)
        
        except CustomAPIException as e:
            raise e
        
        except Exception as e:
            raise CustomAPIException(detail=str(e), status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request):
        try:
            # Your logic here
            data = request.data
            # Do something with the data
            return custom_response(status_code=status.HTTP_201_CREATED, message="Created successfully", data=data)
        
        except CustomAPIException as e:
            raise e
        
        except Exception as e:
            raise CustomAPIException(detail=str(e), status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)


class YourAPIView(APIView):
    pagination_class = CustomPagination  # Assign your custom pagination class

    def get(self, request):
        queryset = YourModel.objects.all() 
        paginated_queryset = self.paginate_queryset(queryset) 
        serializer = YourModelSerializer(paginated_queryset, many=True)  
        return self.get_paginated_response(serializer.data)  